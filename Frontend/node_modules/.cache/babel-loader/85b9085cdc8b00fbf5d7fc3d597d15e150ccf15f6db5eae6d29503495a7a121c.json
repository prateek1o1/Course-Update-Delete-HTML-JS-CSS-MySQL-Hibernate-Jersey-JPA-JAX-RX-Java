{"ast":null,"code":"var _jsxFileName = \"/home/prateek/Downloads/coursecrud/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport loginService from './services/login';\nimport deleteService from './services/delete';\nimport updateService from './services/update';\nimport listService from './services/list';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport NavBar from './components/NavBar';\nimport Delete from './components/Delete';\nimport Update from './components/Update';\nimport List from './components/List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [user, setUser] = useState(null);\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [notification, setNotification] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message);\n    setNotificationType(type);\n    setTimeout(() => {\n      setNotificationType(null);\n      setNotification(null);\n    }, 3000);\n  };\n\n  // Function that handles login of users\n  const handleLogin = async credentials => {\n    try {\n      const userObject = await loginService.login(credentials);\n      setUser(userObject);\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject));\n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success');\n    } catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error');\n    }\n  };\n  const handleCourseUpdate = async credentials => {\n    try {\n      const userObject = await updateService.updatecourse(credentials);\n      notificationHandler(`Course Updated Successfully, ${userObject}`, 'success');\n    } catch (exception) {\n      notificationHandler(`Course Update Failed ${credentials.courseID}`, 'error');\n    }\n  };\n  const handleCourseDelete = async credentials => {\n    try {\n      const userObject = await deleteService.deletecourse(credentials);\n      notificationHandler(`Course Deleted Successfully, ${userObject}`, 'success');\n    } catch (exception) {\n      notificationHandler(`Course Deletion Failed For ${credentials.courseID}`, 'error');\n    }\n  };\n  const handleCourseList = async () => {\n    try {\n      const userObject = await listService.listcourse();\n      notificationHandler(`Course Deleted Successfully, ${userObject}`, 'success');\n    } catch (exception) {\n      notificationHandler(`Course Deletion Failed For `, 'error');\n    }\n  };\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser');\n    if (loggedInUser) setUser(JSON.parse(loggedInUser));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center page-header p-2 regular-text-shadow regular-shadow\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"display-4 font-weight-bold\",\n        children: \"Academia - Courses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notification: notification,\n      type: notificationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /* Show Login form when no login has happened */\n    user === null && /*#__PURE__*/_jsxDEV(LoginForm, {\n      startLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /* Show NavBar when login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(NavBar, {\n      user: user,\n      setUser: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /* Show Login form when no login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(Update, {\n      update: handleCourseUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /* Show Login form when no login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(Delete, {\n      deletes: handleCourseDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /* Show Login form when no login has happened */\n    user !== null && /*#__PURE__*/_jsxDEV(List, {\n      lists: handleCourseList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"+i21XYxbd8B/0dIqX4nt8DslLHA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","loginService","deleteService","updateService","listService","Notification","LoginForm","NavBar","Delete","Update","List","App","user","setUser","notification","setNotification","notificationType","setNotificationType","notificationHandler","message","type","setTimeout","handleLogin","credentials","userObject","login","window","localStorage","setItem","JSON","stringify","firstName","exception","handleCourseUpdate","updatecourse","courseID","handleCourseDelete","deletecourse","handleCourseList","listcourse","loggedInUser","getItem","parse"],"sources":["/home/prateek/Downloads/coursecrud/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'\n\nimport loginService from './services/login'\nimport deleteService from './services/delete'\nimport updateService from './services/update'\nimport listService from './services/list'\n\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport NavBar from './components/NavBar'\n\nimport Delete from './components/Delete'\nimport Update from './components/Update'\nimport List from './components/List'\n\nconst App = () => {\n  // user state will store the logged in user object, if no login has been done yet then it will be null\n  const [ user, setUser ] = useState(null)\n\n\n  // These states are used to control the notifications that show up at the top of the screen for events like \n  // login, signup, watchlist creation, etc.\n  const [ notification, setNotification ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState(null)\n\n  // Create a notification at the top of the screen with given message for 10 seconds \n  // Notifications are of two types, \"error\" and \"success\"\n  // The appearance of these two notifications can be adjusted via the index.css file\n  const notificationHandler = (message, type) => {\n    setNotification(message)\n    setNotificationType(type)\n\n    setTimeout(() => {\n      setNotificationType(null)\n      setNotification(null)\n    }, 3000)\n  }\n\n  // Function that handles login of users\n  const handleLogin = async (credentials) => {\n    try {\n      const userObject = await loginService.login(credentials)\n      setUser(userObject)\n      window.localStorage.setItem('loggedInUser', JSON.stringify(userObject))\n      \n      notificationHandler(`Logged in successfully as ${userObject.firstName}`, 'success')\n      \n    }\n    catch (exception) {\n      notificationHandler(`Log in failed, check username and password entered`, 'error')\n    }\n  }\n\n  const handleCourseUpdate = async (credentials) => {\n    try {\n      const userObject = await updateService.updatecourse(credentials)\n     \n      \n      notificationHandler(`Course Updated Successfully, ${userObject}`, 'success')\n      \n    }\n    catch (exception) {\n      notificationHandler(`Course Update Failed ${credentials.courseID}`, 'error')\n    }\n  }\n\n  const handleCourseDelete = async (credentials) => {\n    try {\n      const userObject = await deleteService.deletecourse(credentials)  \n      \n      notificationHandler(`Course Deleted Successfully, ${userObject}`, 'success')\n      \n    }\n    catch (exception) {\n      notificationHandler(`Course Deletion Failed For ${credentials.courseID}`, 'error')\n    }\n  }\n\n  const handleCourseList = async () => {\n    try {\n      const userObject = await listService.listcourse()  \n      \n      notificationHandler(`Course Deleted Successfully, ${userObject}`, 'success')\n      \n    }\n    catch (exception) {\n      notificationHandler(`Course Deletion Failed For `, 'error')\n    }\n  }\n\n  // Effect Hook that parses the local storage for 'loggedInUser' and sets the \"user\" state if a valid match is found\n  // This enables user to login automatically without having to type in the credentials. Caching the login if you will.\n  useEffect(() => {\n    const loggedInUser = window.localStorage.getItem('loggedInUser')\n    if (loggedInUser)\n      setUser(JSON.parse(loggedInUser))\n  }, [])\n\n  return (\n    <div>\n      {/* Header of the page */}\n      <div className='text-center page-header p-2 regular-text-shadow regular-shadow'>\n          <div className='display-4 font-weight-bold'>\n            Academia - Courses\n          </div>\n      </div>\n      \n      {/* Notification component that will render only when the notification state is not null */}\n      <Notification notification={notification} type={notificationType} />\n\n      {\n        /* Show Login form when no login has happened */\n        user === null && \n        <LoginForm startLogin={handleLogin}/>\n      }\n\n      {\n        /* Show NavBar when login has happened */\n        user !== null && \n        <NavBar user={user} setUser={setUser}/>\n      } \n\n      {\n        // /* Show Bills of the User when login has happened */\n        // user !== null &&\n        // <Bills\n        //   bills={bills}\n        //   payBill={payBill}\n        // />\n      }\n\n      {\n        /* Show Login form when no login has happened */\n        user !== null && \n        <Update update={handleCourseUpdate}/>\n      }\n\n      {\n        /* Show Login form when no login has happened */\n        user !== null && \n        <Delete deletes={handleCourseDelete}\n        />\n      }\n      \n      {\n        /* Show Login form when no login has happened */\n        user !== null && \n        <List lists={handleCourseList}/>\n      }\n\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}