{"ast":null,"code":"import _slicedToArray from\"/home/prateek/Downloads/coursecrud/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';/*\n  This component renders the Login Form with all its functionalities\n  startLogin is the method that uses the axios service to submit login credentials to the backend\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Update=function Update(_ref){var update=_ref.update;// States for tracking form input which are the email address and password\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),courseID=_useState2[0],setCourseID=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),updatedName=_useState4[0],setupdatedName=_useState4[1];// onSubmit event handler of this form\nvar handleUpdate=function handleUpdate(event){// Preventing default submission of the form to the action attribute URL\nevent.preventDefault();var credentials={courseID:courseID,updatedName:updatedName};// Calling startLogin with the provided credentials that will make a call to the backend\nupdate(credentials);// Reset the form state, i.e. the text that's on the username and password text boxes to empty strings\nsetCourseID('');setupdatedName('');};// Typically keep id attributes on your HTML elements so that they can be styled using CSS\nreturn/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleUpdate,id:\"login-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"courseID\",placeholder:\"COURSE-ID\"// Note that the text that's displayed on the textbox (value attribute) is controlled by the email state\n,value:courseID// onChange event handler\n// When you type something on the textbox, the onChange event handler will be triggered\n// This event handler as written below, updates the email state with what's being typed by the user\n// Because a state has been updated, the form component will be re-rendered and you can see the updated input\n// on the screen, obviously this happens so fast that you cannot see it but this is the entire procedure\n,onChange:function onChange(event){return setCourseID(event.target.value);},id:\"courseID\",required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"updatedName\",placeholder:\"updatedName\",value:updatedName,onChange:function onChange(event){return setupdatedName(event.target.value);},id:\"updatedName\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",id:\"update-submit\",children:\"UPDATE\"})]});// Styled Form\n// return (\n//   <div className='form-container'>\n//     <div className='form-box regular-shadow'>\n//       <div className='header-form'>\n//         <h4 className='text-primary text-center'>\n//           <i className='fa fa-user-circle' style={{fontSize:'110px', color: 'lightblue'}}></i>\n//         </h4>\n//         <div className='image'></div>\n//       </div>\n//       <div className='body-form'>\n//         <form onSubmit={handleLogin} id='login-form'>\n//           <div className='input-group mb-3'>\n//             <div className='input-group-prepend'>\n//               <span className='input-group-text'><i className='fa fa-user'></i></span>\n//             </div>\n//             <input \n//               type='text'\n//               className='form-control'\n//               placeholder='Email Address'\n//               value={email}\n//               onChange={event => setEmail(event.target.value)}\n//               id='email'\n//               required\n//             />\n//           </div>\n//           <div className='input-group mb-3'>\n//             <div className='input-group-prepend'>\n//               <span className='input-group-text'><i className='fa fa-lock'></i></span>\n//             </div>\n//             <input\n//               type='password'\n//               className='form-control'\n//               placeholder='Password'\n//               value={password}\n//               onChange={event => setPassword(event.target.value)}\n//               id='password'\n//               required\n//             />\n//           </div>\n//           <button type='submit' className='btn btn-primary btn-block' id='login-submit'>LOGIN</button>\n//         </form>\n//       </div>\n//     </div>\n//   </div>   \n// )\n};export default Update;","map":{"version":3,"names":["React","useState","Update","update","courseID","setCourseID","updatedName","setupdatedName","handleUpdate","event","preventDefault","credentials","target","value"],"sources":["/home/prateek/Downloads/coursecrud/src/components/Update.js"],"sourcesContent":["import React, { useState } from 'react'\n\n/*\n  This component renders the Login Form with all its functionalities\n  startLogin is the method that uses the axios service to submit login credentials to the backend\n*/\nconst Update = ({ update }) => {\n  // States for tracking form input which are the email address and password\n  const [ courseID, setCourseID ] = useState('')\n  const [ updatedName, setupdatedName] = useState('')\n\n  // onSubmit event handler of this form\n  const handleUpdate = (event) => {\n    // Preventing default submission of the form to the action attribute URL\n    event.preventDefault()\n\n    const credentials = {\n      courseID, updatedName\n    }\n\n    // Calling startLogin with the provided credentials that will make a call to the backend\n    update(credentials)\n\n    // Reset the form state, i.e. the text that's on the username and password text boxes to empty strings\n    setCourseID('')\n    setupdatedName('')\n  }\n\n  // Typically keep id attributes on your HTML elements so that they can be styled using CSS\n  return (\n    <form onSubmit={handleUpdate} id='login-form'>\n      <input \n        type='courseID'\n        placeholder='COURSE-ID'\n        // Note that the text that's displayed on the textbox (value attribute) is controlled by the email state\n        value={courseID}\n        // onChange event handler\n        // When you type something on the textbox, the onChange event handler will be triggered\n        // This event handler as written below, updates the email state with what's being typed by the user\n        // Because a state has been updated, the form component will be re-rendered and you can see the updated input\n        // on the screen, obviously this happens so fast that you cannot see it but this is the entire procedure\n        onChange={event => setCourseID(event.target.value)}\n        id='courseID'\n        required\n      />\n        \n      {/* Same as the above username input, except this one has the type password */}\n      <input\n        type='updatedName'\n        placeholder='updatedName'\n        value={updatedName}\n        onChange={event => setupdatedName(event.target.value)}\n        id='updatedName'\n        required\n      />\n\n      {/* Submit button for the form */}\n      <button type='submit' id='update-submit'>UPDATE</button>\n    </form>\n  )\n\n  // Styled Form\n  // return (\n  //   <div className='form-container'>\n  //     <div className='form-box regular-shadow'>\n\n  //       <div className='header-form'>\n  //         <h4 className='text-primary text-center'>\n  //           <i className='fa fa-user-circle' style={{fontSize:'110px', color: 'lightblue'}}></i>\n  //         </h4>\n  //         <div className='image'></div>\n  //       </div>\n\n  //       <div className='body-form'>\n  //         <form onSubmit={handleLogin} id='login-form'>\n\n  //           <div className='input-group mb-3'>\n  //             <div className='input-group-prepend'>\n  //               <span className='input-group-text'><i className='fa fa-user'></i></span>\n  //             </div>\n  //             <input \n  //               type='text'\n  //               className='form-control'\n  //               placeholder='Email Address'\n  //               value={email}\n  //               onChange={event => setEmail(event.target.value)}\n  //               id='email'\n  //               required\n  //             />\n  //           </div>\n\n  //           <div className='input-group mb-3'>\n  //             <div className='input-group-prepend'>\n  //               <span className='input-group-text'><i className='fa fa-lock'></i></span>\n  //             </div>\n  //             <input\n  //               type='password'\n  //               className='form-control'\n  //               placeholder='Password'\n  //               value={password}\n  //               onChange={event => setPassword(event.target.value)}\n  //               id='password'\n  //               required\n  //             />\n  //           </div>\n\n  //           <button type='submit' className='btn btn-primary btn-block' id='login-submit'>LOGIN</button>\n  //         </form>\n  //       </div>\n  //     </div>\n  //   </div>   \n  // )\n}\n\nexport default Update"],"mappings":"wHAAA,MAAOA,MAAK,EAAIC,QAAQ,KAAQ,OAAO,CAEvC;AACA;AACA;AACA,EAHA,wFAIA,GAAMC,OAAM,CAAG,QAATA,OAAM,MAAmB,IAAbC,OAAM,MAANA,MAAM,CACtB;AACA,cAAkCF,QAAQ,CAAC,EAAE,CAAC,wCAAtCG,QAAQ,eAAEC,WAAW,eAC7B,eAAuCJ,QAAQ,CAAC,EAAE,CAAC,yCAA3CK,WAAW,eAAEC,cAAc,eAEnC;AACA,GAAMC,aAAY,CAAG,QAAfA,aAAY,CAAIC,KAAK,CAAK,CAC9B;AACAA,KAAK,CAACC,cAAc,EAAE,CAEtB,GAAMC,YAAW,CAAG,CAClBP,QAAQ,CAARA,QAAQ,CAAEE,WAAW,CAAXA,WACZ,CAAC,CAED;AACAH,MAAM,CAACQ,WAAW,CAAC,CAEnB;AACAN,WAAW,CAAC,EAAE,CAAC,CACfE,cAAc,CAAC,EAAE,CAAC,CACpB,CAAC,CAED;AACA,mBACE,cAAM,QAAQ,CAAEC,YAAa,CAAC,EAAE,CAAC,YAAY,wBAC3C,cACE,IAAI,CAAC,UAAU,CACf,WAAW,CAAC,WACZ;AAAA,CACA,KAAK,CAAEJ,QACP;AACA;AACA;AACA;AACA;AAAA,CACA,QAAQ,CAAE,kBAAAK,KAAK,QAAIJ,YAAW,CAACI,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,EAAC,CACnD,EAAE,CAAC,UAAU,CACb,QAAQ,OACR,cAGF,cACE,IAAI,CAAC,aAAa,CAClB,WAAW,CAAC,aAAa,CACzB,KAAK,CAAEP,WAAY,CACnB,QAAQ,CAAE,kBAAAG,KAAK,QAAIF,eAAc,CAACE,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,EAAC,CACtD,EAAE,CAAC,aAAa,CAChB,QAAQ,OACR,cAGF,eAAQ,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,oBAAgB,GACnD,CAGT;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACF,CAAC,CAED,cAAeX,OAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}