{"ast":null,"code":"var _jsxFileName = \"/home/prateek/Downloads/coursecrud/src/components/Update.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n/*\n  This component renders the Login Form with all its functionalities\n  startLogin is the method that uses the axios service to submit login credentials to the backend\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Update = _ref => {\n  _s();\n  let {\n    update\n  } = _ref;\n  // States for tracking form input which are the email address and password\n  const [courseID, setCourseID] = useState('');\n  const [updatedName, setupdatedName] = useState('');\n\n  // onSubmit event handler of this form\n  const handleUpdate = event => {\n    // Preventing default submission of the form to the action attribute URL\n    event.preventDefault();\n    const credentials = {\n      courseID,\n      updatedName\n    };\n\n    // Calling startLogin with the provided credentials that will make a call to the backend\n    update(credentials);\n\n    // Reset the form state, i.e. the text that's on the username and password text boxes to empty strings\n    setCourseID('');\n    setupdatedName('');\n  };\n\n  // Typically keep id attributes on your HTML elements so that they can be styled using CSS\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleUpdate,\n    id: \"login-form\",\n    align: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"courseID\",\n      placeholder: \"COURSE IDENTITY\"\n      // Note that the text that's displayed on the textbox (value attribute) is controlled by the email state\n      ,\n      value: courseID\n      // onChange event handler\n      // When you type something on the textbox, the onChange event handler will be triggered\n      // This event handler as written below, updates the email state with what's being typed by the user\n      // Because a state has been updated, the form component will be re-rendered and you can see the updated input\n      // on the screen, obviously this happens so fast that you cannot see it but this is the entire procedure\n      ,\n      onChange: event => setCourseID(event.target.value),\n      id: \"courseID\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"updatedName\",\n      placeholder: \"GIVE NAME\",\n      value: updatedName,\n      onChange: event => setupdatedName(event.target.value),\n      id: \"updatedName\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      id: \"update-submit\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"UPDATE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 48\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Update, \"cui1nW+n5xAOJxf0010/KVshRnw=\");\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["React","useState","Update","update","courseID","setCourseID","updatedName","setupdatedName","handleUpdate","event","preventDefault","credentials","target","value"],"sources":["/home/prateek/Downloads/coursecrud/src/components/Update.js"],"sourcesContent":["import React, { useState } from 'react'\n\n/*\n  This component renders the Login Form with all its functionalities\n  startLogin is the method that uses the axios service to submit login credentials to the backend\n*/\nconst Update = ({ update }) => {\n  // States for tracking form input which are the email address and password\n  const [ courseID, setCourseID ] = useState('')\n  const [ updatedName, setupdatedName] = useState('')\n\n  // onSubmit event handler of this form\n  const handleUpdate = (event) => {\n    // Preventing default submission of the form to the action attribute URL\n    event.preventDefault()\n\n    const credentials = {\n      courseID, updatedName\n    }\n\n    // Calling startLogin with the provided credentials that will make a call to the backend\n    update(credentials)\n\n    // Reset the form state, i.e. the text that's on the username and password text boxes to empty strings\n    setCourseID('')\n    setupdatedName('')\n  }\n\n  // Typically keep id attributes on your HTML elements so that they can be styled using CSS\n  return (\n    <form onSubmit={handleUpdate} id='login-form' align=\"center\">\n      <input \n        type='courseID'\n        placeholder='COURSE IDENTITY'\n        // Note that the text that's displayed on the textbox (value attribute) is controlled by the email state\n        value={courseID}\n        // onChange event handler\n        // When you type something on the textbox, the onChange event handler will be triggered\n        // This event handler as written below, updates the email state with what's being typed by the user\n        // Because a state has been updated, the form component will be re-rendered and you can see the updated input\n        // on the screen, obviously this happens so fast that you cannot see it but this is the entire procedure\n        onChange={event => setCourseID(event.target.value)}\n        id='courseID'\n        required\n      />\n       <br></br> \n      {/* Same as the above username input, except this one has the type password */}\n      <input\n        type='updatedName'\n        placeholder='GIVE NAME'\n        value={updatedName}\n        onChange={event => setupdatedName(event.target.value)}\n        id='updatedName'\n        required\n      />\n      <br></br>\n      {/* Submit button for the form */}\n      <button type='submit' id='update-submit'><i>UPDATE</i></button>\n    </form>\n  )\n}\n\nexport default Update"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AACA;AACA;AACA;AAHA;AAIA,MAAMC,MAAM,GAAG,QAAgB;EAAA;EAAA,IAAf;IAAEC;EAAO,CAAC;EACxB;EACA,MAAM,CAAEC,QAAQ,EAAEC,WAAW,CAAE,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAEK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEnD;EACA,MAAMO,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACAA,KAAK,CAACC,cAAc,EAAE;IAEtB,MAAMC,WAAW,GAAG;MAClBP,QAAQ;MAAEE;IACZ,CAAC;;IAED;IACAH,MAAM,CAACQ,WAAW,CAAC;;IAEnB;IACAN,WAAW,CAAC,EAAE,CAAC;IACfE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;;EAED;EACA,oBACE;IAAM,QAAQ,EAAEC,YAAa;IAAC,EAAE,EAAC,YAAY;IAAC,KAAK,EAAC,QAAQ;IAAA,wBAC1D;MACE,IAAI,EAAC,UAAU;MACf,WAAW,EAAC;MACZ;MAAA;MACA,KAAK,EAAEJ;MACP;MACA;MACA;MACA;MACA;MAAA;MACA,QAAQ,EAAEK,KAAK,IAAIJ,WAAW,CAACI,KAAK,CAACG,MAAM,CAACC,KAAK,CAAE;MACnD,EAAE,EAAC,UAAU;MACb,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QACR,eACD;MAAA;MAAA;MAAA;IAAA,QAAS,eAEV;MACE,IAAI,EAAC,aAAa;MAClB,WAAW,EAAC,WAAW;MACvB,KAAK,EAAEP,WAAY;MACnB,QAAQ,EAAEG,KAAK,IAAIF,cAAc,CAACE,KAAK,CAACG,MAAM,CAACC,KAAK,CAAE;MACtD,EAAE,EAAC,aAAa;MAChB,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QACR,eACF;MAAA;MAAA;MAAA;IAAA,QAAS,eAET;MAAQ,IAAI,EAAC,QAAQ;MAAC,EAAE,EAAC,eAAe;MAAA,uBAAC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAa;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QAC1D;AAEX,CAAC;AAAA,GAtDKX,MAAM;AAAA,KAANA,MAAM;AAwDZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}